# -*- coding: utf-8 -*-
"""Idiomatic Python for Performance

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unj5sKPMxymtBuWefEPkXOrAxz5AE0kE
"""

"""
Day 3, Session 1: Idiomatic Python for Performance

Topics Covered:

* Why \"\"\" block comments are bad (memory + parsing)
* Generators vs. Lists vs. Iterators
* Lazy evaluation, itertools, generator expressions
* Common anti-patterns (e.g., default mutable args)
* Best Practice: Use generators, short functions, avoid premature abstraction

"""

# 1. Why \"\"\" Block Comments Are Bad (Memory + Parsing)
# -----------------------------------------------------------
# Concept:
#    Python's triple-quoted strings, while used as comments, are actually strings.
#    This means the interpreter stores them in memory.  Large block comments
#    consume memory and increase parsing time, even though they are ignored
#    during execution.
#
# Why is it important?
#    -   Memory Consumption: In memory-constrained environments, large
#        docstrings can lead to unnecessary memory usage.
#    -   Parsing Overhead: The Python interpreter has to parse these strings,
#        increasing the time it takes to load a module.  This is especially
#        noticeable in large files with many multi-line strings.
#    -   Code Clutter:  While not a performance issue in the execution sense,
#        long comments can make the code harder to read, indirectly impacting
#        development speed.
#
# Internal Implementation:
#    -   When the Python interpreter compiles source code, it creates an Abstract
#        Syntax Tree (AST).  String literals, including those used as docstrings,
#        are represented as `Str` nodes in the AST.
#    -   These `Str` nodes are then compiled into code objects.  Even though the
#        interpreter doesn't execute the string, it still has to process it.
#    -   The CPython interpreter, written in C, allocates memory to store the
#        string's contents.
#
# How to Use:
#    -   Use single-line comments (`#`) for most comments.
#    -   Use docstrings (`\"\"\" \"\"\"`) *only* for function, class, and module
#        documentation, as intended.
#    -   For very long comments, consider breaking them into multiple single-line
#        comments or, if appropriate, storing them in a separate file (e.g., for
#        external documentation).
#
# How it Works:
#     -  The python compiler creates a code object.
#     -  The code object contains all the literal values used in the function, including string literals.
#     -  When the function is executed, the string literals are available in the function's `__code__.co_consts` attribute.
#
# When Not to Use:
#    -   Avoid using triple-quoted strings for general, non-documentation
#        comments, especially large ones.  This is the key takeaway.
#
# Example:
import sys
import time
import psutil

def memory_consumption_example():
    long_string = """This is a very long string that takes up a lot of memory.
It spans multiple lines and contains a lot of text.
... (imagine many more lines here)
"""

    print(f"Size of long_string: {sys.getsizeof(long_string)} bytes")

def process_memory_increase():
    def get_memory():
        return psutil.Process().memory_info().rss

    before = get_memory()
    time.sleep(0.1)
    long_string = """Very very very long string...""" * 1000
    after = get_memory()

    print(f"Memory increase due to long_string: {after - before} bytes")

memory_consumption_example()
process_memory_increase()